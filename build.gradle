/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'brian' at '11/18/15 7:45 PM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
	id 'java'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '1.2.2'
	id 'org.ajoberstar.grgit' version '1.3.2'
}

import org.gradle.build.BuildTypes
extensions.buildTypes = new BuildTypes(project)
 
buildTypes {
   // What is run by the continuous integration (CI) server for build publish
    buildTestPublish "codeQuality", "version", "build", "check"
    // The minimum to be run before check-in
    preCommitBuild "codeQuality", "version", "build", "check"
    // Runs just the code quality checks
    codeQuality "staticCodeQuality", "jacoco",  enableJacoco: true
    // Runs just the static code quality checks
    staticCodeQuality "checkstyle", "findbugsMain", "jdepend", "pmd", enableCheckstyle: true, enableFindbugs: true, enableJdepend: true, enablePmd: true
    
}

group = 'org.deepsource.doterra'
version = "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}-${VERSION_QUALIFIER}"

ext {
	propertiesDir = file("${buildDir}/generated-resources/properties")
	servicePropertiesFile = file("${project.propertiesDir}/org/deepsource/doterra/service.properties")

    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
 
    // Get commit id of HEAD.
    revision = git.head().id
    
    // set the time of this build
    timestamp = new Date().format('dd-MMM-yyyy HH:mm:ss.S z')
    username = System.getProperty('user.name')
    jdkVersion = System.getProperty('java.version')
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

apply from: "$rootDir/gradle/libraries.gradle"

// In this section you declare the dependencies for your production and test code
dependencies {

	compile (
		libraries.dropwizard_metrics_core, 
		libraries.dropwizard_assets, 
		libraries.dropwizard_auth,
        libraries.dropwizard_metrics_jersey2, 
        libraries.dropwizard_metrics_jvm,
        libraries.dropwizard_metrics_servlet, 
        libraries.dropwizard_metrics_servlets,
        libraries.jackson2_datatype_jdk8,
        libraries.jackson2_datatype_jsr310, 
        libraries.jackson2_jaxrs_yaml_provider,
		libraries.jersey_common,
  		libraries.jersey_container_servlet,
  		libraries.jersey_container_servlet_core,
  		libraries.jersey_server,
	)
	
	testCompile (
		libraries.junit,
		libraries.dropwizard_testing, 
		libraries.hamcrest,
		libraries.jersey_container_servlet,
		libraries.jersey_test_framework_util, 
		libraries.jersey_apache_connector,
	)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

jar {
	enabled = false
}

shadowJar {
	classifier = ''
	mergeServiceFiles()
	manifest {
		attributes (
			'Main-Class': 'org.deepsource.doterra.application.DoTerraApplication'
		)
	}
}

assemble.dependsOn shadowJar


task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}
 
assemble.dependsOn testJar

task version() {
  inputs.property "project.version", project.version
  inputs.property "project.revision", project.revision
  inputs.property "project.name", project.name
  inputs.property "project.username", project.username
  inputs.property "project.jdkVersion", project.jdkVersion
  outputs.file servicePropertiesFile
  
  doLast {
    servicePropertiesFile.getParentFile().mkdirs()
    servicePropertiesFile.createNewFile()
    servicePropertiesFile.withWriter { w -> 
      w.println("Implementation-Version: ${project.version}")
      w.println("Implementation-Revision: ${project.revision}")
      w.println("Built-Date: ${project.timestamp}")
      w.println("Built-By: ${project.username}")
      w.println("Built-With: ${project.jdkVersion}")
      w.println("Application-Name: ${project.name}")
    }
  }
}


if (Boolean.parseBoolean("${project.properties['enableCheckstyle']}")) {
    apply from: "$rootDir/gradle/checkstyle.gradle"
}
if (Boolean.parseBoolean("${project.properties['enableJacoco']}")) {
    apply from: "$rootDir/gradle/jacoco.gradle"
}
if (Boolean.parseBoolean("${project.properties['enableFindbugs']}")) {
    apply from: "$rootDir/gradle/findbugs.gradle"
}
if (Boolean.parseBoolean("${project.properties['enableJdepend']}")) {
    apply from: "$rootDir/gradle/jdepend.gradle"
}
if (Boolean.parseBoolean("${project.properties['enablePmd']}")) {
    apply from: "$rootDir/gradle/pmd.gradle"
}
